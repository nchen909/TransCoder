{"repo": "opengridcc/opengrid", "path": "opengrid/library/regression.py", "func_name": "MultiVarLinReg._predict", "original_string": "def _predict(self, fit, df):\n        \"\"\"\n        Return a df with predictions and confidence interval\n\n        Notes\n        -----\n        The df will contain the following columns:\n        - 'predicted': the model output\n        - 'interval_u', 'interval_l': upper and lower confidence bounds.\n\n        The result will depend on the following attributes of self:\n        confint : float (default=0.95)\n            Confidence level for two-sided hypothesis\n        allow_negative_predictions : bool (default=True)\n            If False, correct negative predictions to zero (typically for energy consumption predictions)\n\n        Parameters\n        ----------\n        fit : Statsmodels fit\n        df : pandas DataFrame or None (default)\n            If None, use self.df\n\n\n        Returns\n        -------\n        df_res : pandas DataFrame\n            Copy of df with additional columns 'predicted', 'interval_u' and 'interval_l'\n        \"\"\"\n\n        # Add model results to data as column 'predictions'\n        df_res = df.copy()\n        if 'Intercept' in fit.model.exog_names:\n            df_res['Intercept'] = 1.0\n        df_res['predicted'] = fit.predict(df_res)\n        if not self.allow_negative_predictions:\n            df_res.loc[df_res['predicted'] < 0, 'predicted'] = 0\n\n        prstd, interval_l, interval_u = wls_prediction_std(fit,\n                                                           df_res[fit.model.exog_names],\n                                                           alpha=1 - self.confint)\n        df_res['interval_l'] = interval_l\n        df_res['interval_u'] = interval_u\n\n        if 'Intercept' in df_res:\n            df_res.drop(labels=['Intercept'], axis=1, inplace=True)\n\n        return df_res", "language": "python", "code": "def _predict(self, fit, df):\n        \"\"\"\n        Return a df with predictions and confidence interval\n\n        Notes\n        -----\n        The df will contain the following columns:\n        - 'predicted': the model output\n        - 'interval_u', 'interval_l': upper and lower confidence bounds.\n\n        The result will depend on the following attributes of self:\n        confint : float (default=0.95)\n            Confidence level for two-sided hypothesis\n        allow_negative_predictions : bool (default=True)\n            If False, correct negative predictions to zero (typically for energy consumption predictions)\n\n        Parameters\n        ----------\n        fit : Statsmodels fit\n        df : pandas DataFrame or None (default)\n            If None, use self.df\n\n\n        Returns\n        -------\n        df_res : pandas DataFrame\n            Copy of df with additional columns 'predicted', 'interval_u' and 'interval_l'\n        \"\"\"\n\n        # Add model results to data as column 'predictions'\n        df_res = df.copy()\n        if 'Intercept' in fit.model.exog_names:\n            df_res['Intercept'] = 1.0\n        df_res['predicted'] = fit.predict(df_res)\n        if not self.allow_negative_predictions:\n            df_res.loc[df_res['predicted'] < 0, 'predicted'] = 0\n\n        prstd, interval_l, interval_u = wls_prediction_std(fit,\n                                                           df_res[fit.model.exog_names],\n                                                           alpha=1 - self.confint)\n        df_res['interval_l'] = interval_l\n        df_res['interval_u'] = interval_u\n\n        if 'Intercept' in df_res:\n            df_res.drop(labels=['Intercept'], axis=1, inplace=True)\n\n        return df_res", "code_tokens": ["def", "_predict", "(", "self", ",", "fit", ",", "df", ")", ":", "df_res", "=", "df", ".", "copy", "(", ")", "if", "'Intercept'", "in", "fit", ".", "model", ".", "exog_names", ":", "df_res", "[", "'Intercept'", "]", "=", "1.0", "df_res", "[", "'predicted'", "]", "=", "fit", ".", "predict", "(", "df_res", ")", "if", "not", "self", ".", "allow_negative_predictions", ":", "df_res", ".", "loc", "[", "df_res", "[", "'predicted'", "]", "<", "0", ",", "'predicted'", "]", "=", "0", "prstd", ",", "interval_l", ",", "interval_u", "=", "wls_prediction_std", "(", "fit", ",", "df_res", "[", "fit", ".", "model", ".", "exog_names", "]", ",", "alpha", "=", "1", "-", "self", ".", "confint", ")", "df_res", "[", "'interval_l'", "]", "=", "interval_l", "df_res", "[", "'interval_u'", "]", "=", "interval_u", "if", "'Intercept'", "in", "df_res", ":", "df_res", ".", "drop", "(", "labels", "=", "[", "'Intercept'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "return", "df_res"], "docstring": "Return a df with predictions and confidence interval\n\n        Notes\n        -----\n        The df will contain the following columns:\n        - 'predicted': the model output\n        - 'interval_u', 'interval_l': upper and lower confidence bounds.\n\n        The result will depend on the following attributes of self:\n        confint : float (default=0.95)\n            Confidence level for two-sided hypothesis\n        allow_negative_predictions : bool (default=True)\n            If False, correct negative predictions to zero (typically for energy consumption predictions)\n\n        Parameters\n        ----------\n        fit : Statsmodels fit\n        df : pandas DataFrame or None (default)\n            If None, use self.df\n\n\n        Returns\n        -------\n        df_res : pandas DataFrame\n            Copy of df with additional columns 'predicted', 'interval_u' and 'interval_l'", "docstring_tokens": ["Return", "a", "df", "with", "predictions", "and", "confidence", "interval"], "sha": "69b8da3c8fcea9300226c45ef0628cd6d4307651", "url": "https://github.com/opengridcc/opengrid/blob/69b8da3c8fcea9300226c45ef0628cd6d4307651/opengrid/library/regression.py#L292-L338", "partition": "train"}