{"repo": "Harium/keel", "path": "src/main/java/com/harium/keel/catalano/math/function/Bessel.java", "func_name": "Bessel.I", "original_string": "public static double I(int n, double x) {\r\n        if (n < 0)\r\n            throw new IllegalArgumentException(\"the variable n out of range.\");\r\n        else if (n == 0)\r\n            return I0(x);\r\n        else if (n == 1)\r\n            return I(x);\r\n\r\n        if (x == 0.0)\r\n            return 0.0;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        double tox = 2.0 / Math.abs(x);\r\n        double bip = 0, ans = 0.0;\r\n        double bi = 1.0;\r\n\r\n        for (int j = 2 * (n + (int) Math.sqrt(ACC * n)); j > 0; j--) {\r\n            double bim = bip + j * tox * bi;\r\n            bip = bi;\r\n            bi = bim;\r\n\r\n            if (Math.abs(bi) > BIGNO) {\r\n                ans *= BIGNI;\r\n                bi *= BIGNI;\r\n                bip *= BIGNI;\r\n            }\r\n\r\n            if (j == n)\r\n                ans = bip;\r\n        }\r\n\r\n        ans *= I0(x) / bi;\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "language": "java", "code": "public static double I(int n, double x) {\r\n        if (n < 0)\r\n            throw new IllegalArgumentException(\"the variable n out of range.\");\r\n        else if (n == 0)\r\n            return I0(x);\r\n        else if (n == 1)\r\n            return I(x);\r\n\r\n        if (x == 0.0)\r\n            return 0.0;\r\n\r\n        double ACC = 40.0;\r\n        double BIGNO = 1.0e+10;\r\n        double BIGNI = 1.0e-10;\r\n\r\n        double tox = 2.0 / Math.abs(x);\r\n        double bip = 0, ans = 0.0;\r\n        double bi = 1.0;\r\n\r\n        for (int j = 2 * (n + (int) Math.sqrt(ACC * n)); j > 0; j--) {\r\n            double bim = bip + j * tox * bi;\r\n            bip = bi;\r\n            bi = bim;\r\n\r\n            if (Math.abs(bi) > BIGNO) {\r\n                ans *= BIGNI;\r\n                bi *= BIGNI;\r\n                bip *= BIGNI;\r\n            }\r\n\r\n            if (j == n)\r\n                ans = bip;\r\n        }\r\n\r\n        ans *= I0(x) / bi;\r\n        return x < 0.0 && n % 2 == 1 ? -ans : ans;\r\n    }", "code_tokens": ["public", "static", "double", "I", "(", "int", "n", ",", "double", "x", ")", "{", "if", "(", "n", "<", "0", ")", "throw", "new", "IllegalArgumentException", "(", "\"the variable n out of range.\"", ")", ";", "else", "if", "(", "n", "==", "0", ")", "return", "I0", "(", "x", ")", ";", "else", "if", "(", "n", "==", "1", ")", "return", "I", "(", "x", ")", ";", "if", "(", "x", "==", "0.0", ")", "return", "0.0", ";", "double", "ACC", "=", "40.0", ";", "double", "BIGNO", "=", "1.0e+10", ";", "double", "BIGNI", "=", "1.0e-10", ";", "double", "tox", "=", "2.0", "/", "Math", ".", "abs", "(", "x", ")", ";", "double", "bip", "=", "0", ",", "ans", "=", "0.0", ";", "double", "bi", "=", "1.0", ";", "for", "(", "int", "j", "=", "2", "*", "(", "n", "+", "(", "int", ")", "Math", ".", "sqrt", "(", "ACC", "*", "n", ")", ")", ";", "j", ">", "0", ";", "j", "--", ")", "{", "double", "bim", "=", "bip", "+", "j", "*", "tox", "*", "bi", ";", "bip", "=", "bi", ";", "bi", "=", "bim", ";", "if", "(", "Math", ".", "abs", "(", "bi", ")", ">", "BIGNO", ")", "{", "ans", "*=", "BIGNI", ";", "bi", "*=", "BIGNI", ";", "bip", "*=", "BIGNI", ";", "}", "if", "(", "j", "==", "n", ")", "ans", "=", "bip", ";", "}", "ans", "*=", "I0", "(", "x", ")", "/", "bi", ";", "return", "x", "<", "0.0", "&&", "n", "%", "2", "==", "1", "?", "-", "ans", ":", "ans", ";", "}"], "docstring": "Bessel function of the first kind, of order n.\n\n@param n Order.\n@param x Value.\n@return I value.", "docstring_tokens": ["Bessel", "function", "of", "the", "first", "kind", "of", "order", "n", "."], "sha": "0369ae674f9e664bccc5f9e161ae7e7a3b949a1e", "url": "https://github.com/Harium/keel/blob/0369ae674f9e664bccc5f9e161ae7e7a3b949a1e/src/main/java/com/harium/keel/catalano/math/function/Bessel.java#L328-L364", "partition": "train"}