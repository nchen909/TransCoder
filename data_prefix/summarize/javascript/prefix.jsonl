{"repo": "ciena-blueplanet/bunsen-core", "path": "src/generator.js", "func_name": "addModelCell", "original_string": "function addModelCell (propertyName, model, cellDefinitions) {\n  const cell = {}\n\n  var defName = propertyName\n  var counter = 1\n\n  while (defName in cellDefinitions) {\n    defName = `${propertyName}${counter}`\n    counter++\n  }\n\n  cellDefinitions[defName] = cell\n\n  const props = getPropertyOrder(model.properties)\n  const children = props.map((propName) => {\n    // we have a circular dependency\n    /* eslint-disable no-use-before-define */\n    return addModel(propName, model.properties[propName], cellDefinitions)\n    /* eslint-enable no-use-before-define */\n  })\n\n  if (model.dependencies) {\n    _.forIn(model.dependencies, (dep, depName) => {\n      const depProps = getPropertyOrder(dep.properties)\n      const depChildren = depProps.map((propName) => {\n        // we have a circular dependency\n        /* eslint-disable no-use-before-define */\n        return addDependentModel(propName, depName, dep.properties[propName], cellDefinitions)\n        /* eslint-enable no-use-before-define */\n      })\n      children.push.apply(children, depChildren)\n    })\n  }\n  cell.children = children\n  return defName\n}", "language": "javascript", "code": "function addModelCell (propertyName, model, cellDefinitions) {\n  const cell = {}\n\n  var defName = propertyName\n  var counter = 1\n\n  while (defName in cellDefinitions) {\n    defName = `${propertyName}${counter}`\n    counter++\n  }\n\n  cellDefinitions[defName] = cell\n\n  const props = getPropertyOrder(model.properties)\n  const children = props.map((propName) => {\n    // we have a circular dependency\n    /* eslint-disable no-use-before-define */\n    return addModel(propName, model.properties[propName], cellDefinitions)\n    /* eslint-enable no-use-before-define */\n  })\n\n  if (model.dependencies) {\n    _.forIn(model.dependencies, (dep, depName) => {\n      const depProps = getPropertyOrder(dep.properties)\n      const depChildren = depProps.map((propName) => {\n        // we have a circular dependency\n        /* eslint-disable no-use-before-define */\n        return addDependentModel(propName, depName, dep.properties[propName], cellDefinitions)\n        /* eslint-enable no-use-before-define */\n      })\n      children.push.apply(children, depChildren)\n    })\n  }\n  cell.children = children\n  return defName\n}", "code_tokens": ["function", "addModelCell", "(", "propertyName", ",", "model", ",", "cellDefinitions", ")", "{", "const", "cell", "=", "{", "}", "var", "defName", "=", "propertyName", "var", "counter", "=", "1", "while", "(", "defName", "in", "cellDefinitions", ")", "{", "defName", "=", "`", "${", "propertyName", "}", "${", "counter", "}", "`", "counter", "++", "}", "cellDefinitions", "[", "defName", "]", "=", "cell", "const", "props", "=", "getPropertyOrder", "(", "model", ".", "properties", ")", "const", "children", "=", "props", ".", "map", "(", "(", "propName", ")", "=>", "{", "return", "addModel", "(", "propName", ",", "model", ".", "properties", "[", "propName", "]", ",", "cellDefinitions", ")", "}", ")", "if", "(", "model", ".", "dependencies", ")", "{", "_", ".", "forIn", "(", "model", ".", "dependencies", ",", "(", "dep", ",", "depName", ")", "=>", "{", "const", "depProps", "=", "getPropertyOrder", "(", "dep", ".", "properties", ")", "const", "depChildren", "=", "depProps", ".", "map", "(", "(", "propName", ")", "=>", "{", "return", "addDependentModel", "(", "propName", ",", "depName", ",", "dep", ".", "properties", "[", "propName", "]", ",", "cellDefinitions", ")", "}", ")", "children", ".", "push", ".", "apply", "(", "children", ",", "depChildren", ")", "}", ")", "}", "cell", ".", "children", "=", "children", "return", "defName", "}"], "docstring": "Add a model cell for the given model\n@param {String} propertyName - the name of the property that holds the model\n@param {BunsenModel} model - the model to add a cell for\n@param {BunsenCell[]} cellDefinitions - the cells set to add the model cell to\n@returns {String} the cell name", "docstring_tokens": ["Add", "a", "model", "cell", "for", "the", "given", "model"], "sha": "993c67e314e2b75003a1ff4c2f0cb667715562b2", "url": "https://github.com/ciena-blueplanet/bunsen-core/blob/993c67e314e2b75003a1ff4c2f0cb667715562b2/src/generator.js#L78-L113", "partition": "train"}