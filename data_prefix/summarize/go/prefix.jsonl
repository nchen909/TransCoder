{"repo": "rkt/rkt", "path": "stage0/registration.go", "func_name": "registerPod", "original_string": "func registerPod(root string, uuid *types.UUID, apps schema.AppList) (token string, rerr error) {\n\tu := uuid.String()\n\n\tvar err error\n\ttoken, err = generateMDSToken()\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to generate MDS token\"), err)\n\t\treturn\n\t}\n\n\tpmfPath := common.PodManifestPath(root)\n\tpmf, err := os.Open(pmfPath)\n\tif err != nil {\n\t\trerr = errwrap.Wrap(fmt.Errorf(\"failed to open runtime manifest (%v)\", pmfPath), err)\n\t\treturn\n\t}\n\n\tpth := fmt.Sprintf(\"/pods/%v?token=%v\", u, token)\n\terr = httpRequest(\"PUT\", pth, pmf)\n\tpmf.Close()\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to register pod with metadata svc\"), err)\n\t\treturn\n\t}\n\n\tdefer func() {\n\t\tif rerr != nil {\n\t\t\tunregisterPod(root, uuid)\n\t\t}\n\t}()\n\n\trf, err := os.Create(filepath.Join(root, mdsRegisteredFile))\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to create mds-register file\"), err)\n\t\treturn\n\t}\n\trf.Close()\n\n\tfor _, app := range apps {\n\t\tampath := common.ImageManifestPath(root, app.Name)\n\t\tamf, err := os.Open(ampath)\n\t\tif err != nil {\n\t\t\trerr = errwrap.Wrap(fmt.Errorf(\"failed reading app manifest %q\", ampath), err)\n\t\t\treturn\n\t\t}\n\n\t\terr = registerApp(u, app.Name.String(), amf)\n\t\tamf.Close()\n\t\tif err != nil {\n\t\t\trerr = errwrap.Wrap(errors.New(\"failed to register app with metadata svc\"), err)\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}", "language": "go", "code": "func registerPod(root string, uuid *types.UUID, apps schema.AppList) (token string, rerr error) {\n\tu := uuid.String()\n\n\tvar err error\n\ttoken, err = generateMDSToken()\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to generate MDS token\"), err)\n\t\treturn\n\t}\n\n\tpmfPath := common.PodManifestPath(root)\n\tpmf, err := os.Open(pmfPath)\n\tif err != nil {\n\t\trerr = errwrap.Wrap(fmt.Errorf(\"failed to open runtime manifest (%v)\", pmfPath), err)\n\t\treturn\n\t}\n\n\tpth := fmt.Sprintf(\"/pods/%v?token=%v\", u, token)\n\terr = httpRequest(\"PUT\", pth, pmf)\n\tpmf.Close()\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to register pod with metadata svc\"), err)\n\t\treturn\n\t}\n\n\tdefer func() {\n\t\tif rerr != nil {\n\t\t\tunregisterPod(root, uuid)\n\t\t}\n\t}()\n\n\trf, err := os.Create(filepath.Join(root, mdsRegisteredFile))\n\tif err != nil {\n\t\trerr = errwrap.Wrap(errors.New(\"failed to create mds-register file\"), err)\n\t\treturn\n\t}\n\trf.Close()\n\n\tfor _, app := range apps {\n\t\tampath := common.ImageManifestPath(root, app.Name)\n\t\tamf, err := os.Open(ampath)\n\t\tif err != nil {\n\t\t\trerr = errwrap.Wrap(fmt.Errorf(\"failed reading app manifest %q\", ampath), err)\n\t\t\treturn\n\t\t}\n\n\t\terr = registerApp(u, app.Name.String(), amf)\n\t\tamf.Close()\n\t\tif err != nil {\n\t\t\trerr = errwrap.Wrap(errors.New(\"failed to register app with metadata svc\"), err)\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}", "code_tokens": ["func", "registerPod", "(", "root", "string", ",", "uuid", "*", "types", ".", "UUID", ",", "apps", "schema", ".", "AppList", ")", "(", "token", "string", ",", "rerr", "error", ")", "{", "u", ":=", "uuid", ".", "String", "(", ")", "\n", "var", "err", "error", "\n", "token", ",", "err", "=", "generateMDSToken", "(", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "errors", ".", "New", "(", "\"failed to generate MDS token\"", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "pmfPath", ":=", "common", ".", "PodManifestPath", "(", "root", ")", "\n", "pmf", ",", "err", ":=", "os", ".", "Open", "(", "pmfPath", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "fmt", ".", "Errorf", "(", "\"failed to open runtime manifest (%v)\"", ",", "pmfPath", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "pth", ":=", "fmt", ".", "Sprintf", "(", "\"/pods/%v?token=%v\"", ",", "u", ",", "token", ")", "\n", "err", "=", "httpRequest", "(", "\"PUT\"", ",", "pth", ",", "pmf", ")", "\n", "pmf", ".", "Close", "(", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "errors", ".", "New", "(", "\"failed to register pod with metadata svc\"", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "defer", "func", "(", ")", "{", "if", "rerr", "!=", "nil", "{", "unregisterPod", "(", "root", ",", "uuid", ")", "\n", "}", "\n", "}", "(", ")", "\n", "rf", ",", "err", ":=", "os", ".", "Create", "(", "filepath", ".", "Join", "(", "root", ",", "mdsRegisteredFile", ")", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "errors", ".", "New", "(", "\"failed to create mds-register file\"", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "rf", ".", "Close", "(", ")", "\n", "for", "_", ",", "app", ":=", "range", "apps", "{", "ampath", ":=", "common", ".", "ImageManifestPath", "(", "root", ",", "app", ".", "Name", ")", "\n", "amf", ",", "err", ":=", "os", ".", "Open", "(", "ampath", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "fmt", ".", "Errorf", "(", "\"failed reading app manifest %q\"", ",", "ampath", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "err", "=", "registerApp", "(", "u", ",", "app", ".", "Name", ".", "String", "(", ")", ",", "amf", ")", "\n", "amf", ".", "Close", "(", ")", "\n", "if", "err", "!=", "nil", "{", "rerr", "=", "errwrap", ".", "Wrap", "(", "errors", ".", "New", "(", "\"failed to register app with metadata svc\"", ")", ",", "err", ")", "\n", "return", "\n", "}", "\n", "}", "\n", "return", "\n", "}"], "docstring": "// registerPod registers pod with metadata service.\n// Returns authentication token to be passed in the URL", "docstring_tokens": ["registerPod", "registers", "pod", "with", "metadata", "service", ".", "Returns", "authentication", "token", "to", "be", "passed", "in", "the", "URL"], "sha": "0c8765619cae3391a9ffa12c8dbd12ba7a475eb8", "url": "https://github.com/rkt/rkt/blob/0c8765619cae3391a9ffa12c8dbd12ba7a475eb8/stage0/registration.go#L54-L109", "partition": "train"}